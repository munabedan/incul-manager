#!/usr/bin/python3


import sys
import subprocess
import os
import time

# create  incul container
# - create incul container
# - append incul container .desktop files to host .desktop files
def create(container_name):
    subprocess.run(["incus", "copy", "incul-template", container_name])

    start(container_name)

    # wait for container to start
    # TODO: check for ip availability instead
    time.sleep(5)

    sync()

    restart_panel()


def start(container_name):
    subprocess.run(["incus", "start", container_name])


def pause(container_name):
    subprocess.run(["incus", "pause", container_name])


def stop(container_name):
    subprocess.run(["incus", "stop", container_name])


def restart(container_name):
    subprocess.run(["incus", "restart", container_name])


def backup(container_name):
    home = os.environ["HOME"]
    subprocess.run(["incus", "export", container_name, home])


def delete(container_name):
    script_path = "incul-sync-clean"
    run_script(script_path)

    stop(container_name)
    subprocess.run(["incus", "delete", container_name])

    sync()
    restart_panel()



def list_containers():
    subprocess.run(["incus", "list"])


def sync():

    command = ["incus", "list", "-c", "n", "--format=csv"]

    try:

        result = subprocess.run(
            command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True
        )

        output = result.stdout.decode("utf-8")

        print("output:", output)

        container_names = [name.strip() for name in output.splitlines()]

        print("container names:", container_names)

        script_path = "incul-sync-clean"
        run_script(script_path)

        for container_name in container_names:
            script_path = "incul-sync"
            run_script(script_path, container_name)

        restart_panel()

    except subprocess.CalledProcessError as e:
        print("Error:", e)
        print("Command output (stderr):", e.stderr.decode("utf-8"))


def init():
    script_path = "incul-init"
    run_script(script_path)


def create_template():
    script_path = "incul-create-template"
    run_script(script_path)

    # TODO: be able to create different templates


def run_script(script_path, variables=""):
    try:
        subprocess.run(["bash", script_path, variables], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error running the script: {e}")


def restart_panel():
    script_path = "restart-xfce4-panel"
    run_script(script_path)

def arg_check(container_name):
    if container_name is None:
        print("Please provide a container name for this action.")
        sys.exit(1)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: incul-manager <action> [<container-name>]")
        sys.exit(1)

    action = sys.argv[1]
    container_name = sys.argv[2] if len(sys.argv) > 2 else None

    actions = {
        "create": create,
        "start": start,
        "pause": pause,
        "stop": stop,
        "restart": restart,
        "backup": backup,
        "delete": delete,
        "list": list_containers,
        "init": init,
        "sync": sync,
        "create-template": create_template,
    }

    if action not in actions:
        print(
            "Invalid action. Please choose one of: create|run|pause|stop|restart|backup|delete|list"
        )
        sys.exit(1)

    if action in ["list", "init", "sync"]:
        actions[action]()

    if action in ["create", "start", "pause", "stop", "restart", "backup", "delete"]:
        arg_check(container_name)
        actions[action](container_name)

    # TODO: be able to create different templates
    if action == "create-template":
        actions[action]()

    elif container_name is None:
        print("Please provide a container name for this action.")
        sys.exit(1)
