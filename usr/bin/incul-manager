#!/usr/bin/python3


import sys
import subprocess
import os
import time
import shutil

# create  incul container
# - create incul container
# - append incul container .desktop files to host .desktop files
def create(container_name):
    subprocess.run(["incus", "copy", "incul-template", container_name])
    shutil.copy("/etc/inculs-manager/config.sh", f"/home/{os.environ['USER']}/.config/incul-manager/{container_name}-config.sh")

    start(container_name)

    # wait for container to start
    # TODO: check for ip availability instead
    time.sleep(5)
    
    new_user(container_name)
    
    sync()

    restart_panel()

def new_user(container_name):
    # Ask if the user wants a new username and password for this container
    new_user = input("Do you want to create a new user for this container? (y/n): ").strip().lower()
    if new_user == "y":
        username = input("Enter the new username: ").strip()
        password = input("Enter the new password: ").strip()
        
        # Update the config file with the new username and password
        with open(f"/home/{os.environ['USER']}/.config/incul-manager/{container_name}-config.sh", "r") as file:
            config_lines = file.readlines()
        with open(f"/home/{os.environ['USER']}/.config/incul-manager/{container_name}-config.sh", "w") as file:
            for line in config_lines:
                if line.startswith("username="):
                    file.write(f'username="{username}"\n')
                elif line.startswith("password="):
                    file.write(f'password="{password}"\n')
                else:
                    file.write(line)
        
        # Push the updated config file to the container and delete the default user
        subprocess.run(["incus", "file", "push", f"/home/{os.environ['USER']}/.config/incul-manager/{container_name}-config.sh", f"{container_name}/root/config.sh"])
        subprocess.run(["incus", "exec", container_name, "--", "chmod", "+x", "/root/config.sh"])
        subprocess.run(["incus", "exec", container_name, "--", "/root/incul-create-user"])
        subprocess.run(["incus", "exec", container_name, "--","sudo", "deluser", "--remove-all-file", "incul"])
        create_ssh_keys(container_name, username)
    else:
        print("Keeping the default user incul:incul")
        create_ssh_keys(container_name, "incul")


def create_ssh_keys(container_name, username):
    ip_address = get_container_ip(container_name)
    public_key = open(f"/home/{os.environ['USER']}/.ssh/incul-id_rsa.pub", "r").read()
    
    # Create the .ssh directory and add give correct permissions to the folder
    subprocess.run(["incus", "exec", container_name, "--", "mkdir", "-p", f"/home/{username}/.ssh"])
    subprocess.run(["incus", "exec", container_name, "--", "chown", "-R", f"{username}:{username}", f"/home/{username}/.ssh"])
    subprocess.run(["incus", "exec", container_name, "--", "chmod", "700", f"/home/{username}/.ssh"])

    # Add the public key to the authorized_keys file    
    subprocess.run(["ssh-copy-id", "-i", f"/home/{os.environ['USER']}/.ssh/incul-id_rsa.pub", f"{username}@{ip_address}"])
    
    # Remove the password info from the config file
    with open(f"/home/{os.environ['USER']}/.config/incul-manager/{container_name}-config.sh", "r") as file:
            config_lines = file.readlines()
    with open(f"/home/{os.environ['USER']}/.config/incul-manager/{container_name}-config.sh", "w") as file:
        for line in config_lines:
            if line.startswith("password="):
                file.write(f'password=" "\n')
            else:
                file.write(line)

def get_container_ip(container_name):
    result = subprocess.run(
        f"incus list | grep {container_name} | awk -F'|' '{{split($4, a, \"(\"); print a[1]}}'",
        shell=True,
        stdout=subprocess.PIPE
    )
    return result.stdout.decode("utf-8").strip().replace(" ", "")

def start(container_name):
    subprocess.run(["incus", "start", container_name])


def pause(container_name):
    subprocess.run(["incus", "pause", container_name])


def stop(container_name):
    subprocess.run(["incus", "stop", container_name])


def restart(container_name):
    subprocess.run(["incus", "restart", container_name])


def backup(container_name):
    home = os.environ["HOME"]
    subprocess.run(["incus", "export", container_name, home])


def delete(container_name):
    script_path = "incul-sync-clean"
    run_script(script_path)

    stop(container_name)
    subprocess.run(["incus", "delete", container_name])

    sync()
    restart_panel()



def list_containers():
    subprocess.run(["incus", "list"])


def sync():

    command = ["incus", "list", "-c", "n", "--format=csv"]

    try:

        result = subprocess.run(
            command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True
        )

        output = result.stdout.decode("utf-8")

        print("output:", output)

        container_names = [name.strip() for name in output.splitlines()]

        print("container names:", container_names)

        script_path = "incul-sync-clean"
        run_script(script_path)

        for container_name in container_names:
            script_path = "incul-sync"
            run_script(script_path, container_name)

        restart_panel()

    except subprocess.CalledProcessError as e:
        print("Error:", e)
        print("Command output (stderr):", e.stderr.decode("utf-8"))


def init():
    script_path = "incul-init"
    run_script(script_path)


def create_template():
    script_path = "incul-create-template"
    run_script(script_path)

    # TODO: be able to create different templates


def run_script(script_path, variables=""):
    try:
        subprocess.run(["bash", script_path, variables], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error running the script: {e}")


def restart_panel():
    script_path = "restart-xfce4-panel"
    run_script(script_path)



if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: incul-manager <action> [<container-name>]")
        sys.exit(1)

    action = sys.argv[1]
    container_name = sys.argv[2] if len(sys.argv) > 2 else None

    actions = {
        "create": create,
        "start": start,
        "pause": pause,
        "stop": stop,
        "restart": restart,
        "backup": backup,
        "delete": delete,
        "list": list_containers,
        "init": init,
        "sync": sync,
        "create-template": create_template,
    }

    if action not in actions:
        print(
            "Invalid action. Please choose one of: create|run|pause|stop|restart|backup|delete|list"
        )
        sys.exit(1)

    if action == "list":
        actions[action]()

    if action == "init":
        actions[action]()

    if action == "sync":
        actions[action]()

    if action == "create":
        actions[action](container_name)

    if action == "start":
        actions[action](container_name)

    if action == "pause":
        actions[action](container_name)

    if action == "stop":
        actions[action](container_name)

    if action == "restart":
        actions[action](container_name)

    if action == "backup":
        actions[action](container_name)

    if action == "delete":
        actions[action](container_name)

    if action == "create-template":
        actions[action]()

    elif container_name is None:
        print("Please provide a container name for this action.")
        sys.exit(1)
